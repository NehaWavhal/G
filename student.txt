// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract StudentManagement {

    struct Student {
        uint stud_id; // Changed to uint (unsigned integer)
        string Name;
        string Department;
    }

    Student[] public Students; // Array to store students, made public for easy access

    // Function to add a student
    function addStud(uint stud_id, string memory Name, string memory Department) public {
        Student memory stud = Student(stud_id, Name, Department);
        Students.push(stud);
    }

    // Function to get a student by ID
    function getStudent(uint stud_id) public view returns (string memory, string memory) {
        for (uint i = 0; i < Students.length; i++) {
            Student memory stud = Students[i];
            if (stud.stud_id == stud_id) {
                return (stud.Name, stud.Department);
            }
        }
        revert("Student not found"); // Revert if student is not found
    }

    // Function to delete a student by ID
    function deleteStudent(uint stud_id) public {
        for (uint i = 0; i < Students.length; i++) {
            if (Students[i].stud_id == stud_id) {
                // Shift all the elements after the found student to the left to remove them
                Students[i] = Students[Students.length - 1];
                Students.pop(); // Remove the last element (since we moved it to the deleted student's spot)
                return;
            }
        }
        revert("Student not found to delete"); // Revert if student is not found
    }

    // Function to update a student's information by ID
    function updateStudent(uint stud_id, string memory newName, string memory newDepartment) public {
        for (uint i = 0; i < Students.length; i++) {
            if (Students[i].stud_id == stud_id) {
                Students[i].Name = newName;        // Update name
                Students[i].Department = newDepartment; // Update department
                return;
            }
        }
        revert("Student not found to update"); // Revert if student is not found
    }

    // Receive ether function: This function is called when the contract is sent ether without data
    receive() external payable {
        // You can handle any logic related to receiving ether here
        // For now, just keep it empty
    }

    // Fallback function: This is called when the contract is sent ether with data
    fallback() external payable {
        Students.push(Student(7, "XYZ", "Mechanical"));
    }
}